name: CI

on: [push, pull_request]

jobs:
  cargo_fmt:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: cargo fmt --all -- --check
  build_for_linux_and_operational_test:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: cargo test -- --color=always --nocapture
    - name: Release build
      run: |
        set -eux
        docker run --rm -v "$(pwd)":/home/rust/src nwtgck/rust-musl-builder:1.56.1 sh -c 'sudo chown -R rust:rust . && cargo build --release'
        sudo chown -R $USER:$USER .
    - name: Operational test
      run: |
        set -x
        # Create certificates
        mkdir ssl_certs && cd ssl_certs && openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -sha256 -nodes --subj '/CN=localhost/' && cd -
        # Run a server
        ./target/x86_64-unknown-linux-musl/release/piping-server --http-port=8181 --enable-https --https-port=8443 --crt-path=./ssl_certs/server.crt --key-path=./ssl_certs/server.key &
        sleep 3

        # Transfer data over HTTP
        echo "hello, world" | curl -T - localhost:8181/mypath &
        diff <(echo "hello, world") <(curl localhost:8181/mypath)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTP
        cat /tmp/500M.dat | curl -T - localhost:8181/mypath &
        diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath)
        rm /tmp/500M.dat

        # Transfer data over HTTPS
        echo "hello, world with HTTPS" | curl -kT - https://localhost:8443/mypath2 &
        diff <(echo "hello, world with HTTPS") <(curl -k https://localhost:8443/mypath2)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTPS
        cat /tmp/500M.dat | curl -kT - https://localhost:8443/mypath2 &
        diff <(cat /tmp/500M.dat) <(curl -k https://localhost:8443/mypath2)
        rm /tmp/500M.dat

        # HTTP/2 support
        (echo hello | curl -ksST- https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n' > /tmp/http2_post.txt) &
        diff <(echo '2:200') <(curl -ksS https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n')
        diff <(echo '2:200') /tmp/http2_post.txt

        # Transfer data using multipart
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTP
        curl -F myfile=@/tmp/500M.dat localhost:8181/mypath3 &
        diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath3)
        rm /tmp/500M.dat

    - name: Archive
      run: |
        set -eux
        mkdir piping-server-x86-64-linux
        cp target/x86_64-unknown-linux-musl/release/piping-server piping-server-x86-64-linux
        zip -r piping-server-x86-64-linux.zip piping-server-x86-64-linux
        tar czf piping-server-x86-64-linux.tar.gz piping-server-x86-64-linux
    - name: Upload Linux executables as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.sha }}-linux-artifacts
        path: piping-server-x86-64-linux.*

  build_for_mac:
    runs-on: macOS-10.15
    steps:
    - uses: actions/checkout@v2
    - run: cargo test -- --color=always --nocapture
    - run: cargo build --release
    - name: Archive
      run: |
        set -eux
        mkdir piping-server-x86-64-apple-darwin
        cp target/release/piping-server piping-server-x86-64-apple-darwin
        zip -r piping-server-x86-64-apple-darwin.zip piping-server-x86-64-apple-darwin
        tar czf piping-server-x86-64-apple-darwin.tar.gz piping-server-x86-64-apple-darwin
    - name: Upload macOS executables as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.sha }}-mac-artifacts
        path: piping-server-x86-64-apple-darwin.*

  docker:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: docker build -t piping-server-rust .
    - name: Operational test with Docker image
      run: |
        set -eux
        # Create certificates
        mkdir ssl_certs && cd ssl_certs && openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -sha256 -nodes --subj '/CN=localhost/' && cd -
        # Run a server
        docker run -d --name=piping -p 8181:80 -p 8443:443 -v $PWD/ssl_certs:/ssl_certs piping-server-rust --http-port=80 --enable-https --https-port=443 --crt-path=/ssl_certs/server.crt --key-path=/ssl_certs/server.key
        # Wait for server running
        sleep 1

        # Transfer data over HTTP
        echo "hello, world" | curl -T - localhost:8181/mypath &
        diff <(echo "hello, world") <(curl localhost:8181/mypath)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTP
        cat /tmp/500M.dat | curl -T - localhost:8181/mypath &
        diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath)
        rm /tmp/500M.dat

        # Transfer data over HTTPS
        echo "hello, world with HTTPS" | curl -kT - https://localhost:8443/mypath2 &
        diff <(echo "hello, world with HTTPS") <(curl -k https://localhost:8443/mypath2)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTPS
        cat /tmp/500M.dat | curl -kT - https://localhost:8443/mypath2 &
        diff <(cat /tmp/500M.dat) <(curl -k https://localhost:8443/mypath2)
        rm /tmp/500M.dat

        # HTTP/2 support
        (echo hello | curl -ksST- https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n' > /tmp/http2_post.txt) &
        diff <(echo '2:200') <(curl -ksS https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n')
        diff <(echo '2:200') /tmp/http2_post.txt

        # Transfer data using multipart
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTP
        curl -F myfile=@/tmp/500M.dat localhost:8181/mypath3 &
        diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath3)
        rm /tmp/500M.dat

        # Print server log
        docker logs piping
        # Delete container
        docker rm -f piping

  release_if_tag_exits:
    needs: [build_for_linux_and_operational_test, build_for_mac]
    runs-on: ubuntu-18.04
    steps:
    - name: Extract tag name
      shell: bash
      run: echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"
      id: extract_tag
    # NOTE: checkout is needed to use hub command
    - uses: actions/checkout@v2
    - name: Download the artifact (Linux)
      uses: actions/download-artifact@v2
      with:
        name: ${{ github.sha }}-linux-artifacts
    - name: Download the artifact (macOS)
      uses: actions/download-artifact@v2
      with:
        name: ${{ github.sha }}-mac-artifacts
    - run: ls -la
    # (base: https://github.com/actions/upload-release-asset/issues/28#issuecomment-617208601)
    - name: Release
      if: contains(github.ref, 'refs/tags/')
      run: |
        set -eux
        hub release create \
          -a piping-server-x86-64-linux.tar.gz \
          -a piping-server-x86-64-linux.zip \
          -a piping-server-x86-64-apple-darwin.tar.gz \
          -a piping-server-x86-64-apple-darwin.zip \
          -m "Release ${{ steps.extract_tag.outputs.tag }}" ${{ steps.extract_tag.outputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
